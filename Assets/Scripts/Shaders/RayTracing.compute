#include "Struct.compute"
#include "Shading.compute"

#pragma kernel RayTracing
#pragma multi_compile_local __ _WHITE_STYLE
#pragma multi_compile_local __ _USE_OUTSIDE_MODEL

// Create a RenderTexture with enableRandomWrite flag and set it with cs.SetTexture
RWTexture2D<float4> Result;
TextureCube<float4> Skybox;
// 采样器名称必须和纹理名称完全一致再在前面加上sampler
SamplerState samplerSkybox;
StructuredBuffer<MeshObject> meshObjectBuffer;
StructuredBuffer<float3> verticesBuffer;
StructuredBuffer<int> indicesBuffer;
StructuredBuffer<Sphere> sphereBuffer;
StructuredBuffer<BvhNode> bvhBuffer;
float2 Offset;
float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
uint ReflectTimes;
float4 directionalLight;
float3 lightColor;
float randSeed;

Ray PrimaryRayFromCam(float2 uv);
RayHit PathTrace(Ray ray);
void IntersectGroundPlane(Ray ray, inout RayHit hit);
void IntersectSphere(Ray ray, inout RayHit hit, uint i);
bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v);
void IntersectObject(Ray ray, inout RayHit hit, MeshObject object);
bool IntersectAABB(Ray ray, AABB box);
void TraverseBVH(Ray ray, inout RayHit hit);
float3 Shading(inout Ray ray, RayHit hit, uint2 idxy);
float3 HemiSpehereSampling(uint2 idxy, float3 normal, float alpha = 1.0);
float3 GGXSampling(uint2 idxy, float3 normal, float r2);
float3x3 ToTangentSpace(float3 normal);
Ray GenerateRay(float3 position, float3 direction);
RayHit GenerateRayHit();
float Rand(uint2 seed);

[numthreads(16
, 16, 1)]
void RayTracing (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + Offset) / float2(width, height) * 2.0f - 1.0f);
    Ray ray = PrimaryRayFromCam(uv);

    float3 result = float3(0.0, 0.0, 0.0);
    for (uint i = 0; i < ReflectTimes; ++i){
        RayHit hit = PathTrace(ray);
        // float isEmssion = dot(hit.emission, float3(1, 1, 1));
        // if (isEmssion == 0){
        //     Ray shadowRay = GenerateRay(hit.pos + hit.normal * 0.001, directionalLight.xyz + HemiSpehereSampling(id.xy, hit.normal, 0.0f) * 0.009);
        //     RayHit shadowHit = PathTrace(shadowRay);
        //     isEmssion = dot(shadowHit.emission, float3(1, 1, 1));
        //     if (shadowHit.dist != 1.#INF && isEmssion == 0){
        //         break;
        //     }
        // }
        result += ray.energy * Shading(ray, hit, id.xy);

        if (!any(ray.energy))
            break;
    }
    Result[id.xy] = float4(result, 1.0);
}

Ray GenerateRay(float3 position, float3 direction){
    Ray ray;
    ray.pos = position;
    ray.dir = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

RayHit GenerateRayHit(){
    RayHit hit;
    hit.dist = 1.#INF;
    hit.metallic = 0.0;
    hit.roughness = 0.0;
    hit.specTrans = 0.0;
    hit.specular = 0.0;
    hit.relativeIor = 1.0;
    hit.pos = float3(0.0, 0.0, 0.0);
    hit.normal = float3(0.0, 0.0, 0.0);
    hit.albedo = float3(0.0, 0.0, 0.0);
    hit.transColor = float3(0.0, 0.0, 0.0);
    hit.emission = float3(0.0, 0.0, 0.0);
    return hit;
}

Ray PrimaryRayFromCam(float2 uv){
    float3 pos = mul(CameraToWorld, float4(0.0, 0.0, 0.0, 1.0)).xyz;
    float3 dir = mul(CameraInverseProjection, float4(uv, 0.0, 1.0)).xyz;
    dir = mul(CameraToWorld, float4(dir, 0.0)).xyz;
    dir = normalize(dir);
    return GenerateRay(pos, dir);
}

RayHit PathTrace(Ray ray){
    RayHit hit = GenerateRayHit();
    // IntersectGroundPlane(ray, hit);
    uint meshCount, strides, i;
#if _USE_OUTSIDE_MODEL
    meshObjectBuffer.GetDimensions(meshCount, strides);
    for (i = 0; i < meshCount; ++i)
        IntersectObject(ray, hit, meshObjectBuffer[i]);
#else
    bvhBuffer.GetDimensions(meshCount, strides);
    // sphereBuffer.GetDimensions(meshCount, strides);
    // for (i = 0; i < meshCount; ++i){
    //     IntersectSphere(ray, hit, i);
    // }
    TraverseBVH(ray, hit);
#endif
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit hit){
    float t = -ray.pos.y / ray.dir.y;
    if (t > 0 && t < hit.dist){
        hit.dist = t;
        hit.pos = ray.pos + t * ray.dir;
        hit.normal = float3(0.0, 1.0, 0.0);
        hit.albedo = float3(0.6, 0.6, 0.6);
        hit.specular = 0.4;
        hit.metallic = 0.1;
        hit.roughness = 0.8;
        hit.specTrans = 0.2;
        hit.relativeIor = 1.0;
        hit.transColor = float3(1.0, 1.0, 1.0);
        hit.emission = float3(0.0, 0.0, 0.0);
    }
}

void IntersectSphere(Ray ray, inout RayHit hit, uint index){
    Sphere sphere = sphereBuffer[index];
    float3 dist = ray.pos - sphere.pos;
    float p1 = -dot(ray.dir, dist);
    float p2 = p1 * p1 - dot(dist, dist) + sphere.radius * sphere.radius;
    if (p2 < 0)
        return;
    p2 = sqrt(p2);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < hit.dist){
        hit.dist = t;
        hit.pos = ray.pos + t * ray.dir;
        hit.normal = normalize(hit.pos - sphere.pos);
        hit.albedo = sphere.albedo;
        hit.specular = sphere.specular;
        hit.metallic = sphere.metallic;
        hit.roughness = sphere.roughness;
        hit.specTrans = sphere.specTrans;
        hit.relativeIor = sphere.relativeIor;
        hit.transColor = sphere.transColor;
        hit.emission = sphere.emission;
    }
}

bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v){
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    float3 s = ray.pos - vert0;
    float3 s1 = cross(ray.dir, edge2);
    float3 s2 = cross(s, edge1);
    float S1DotE1 = dot(s1, edge1);
    if (S1DotE1 < 1e-8)
        return false;
    t = dot(s2, edge2) / S1DotE1;
    u = dot(s1, s) / S1DotE1;
    if (u < 0.0 || u > 1.0)
        return false;
    v = dot(s2, ray.dir) / S1DotE1;
    if (v < 0.0 || u + v > 1.0)
        return false;

    return true;
}

bool IntersectAABB(Ray ray, AABB box){
    float3 invDir = 1.0 / ray.dir;
    float3 inAABB = (box.TMin - ray.pos) * invDir;
    float3 outAAABB = (box.TMax - ray.pos) * invDir;
    float3 TMin = min(inAABB, outAAABB);
    float3 TMax = max(inAABB, outAAABB);
    float Tin = max(TMin.x, max(TMin.y, TMin.z));
    float Tout = min(TMax.x, min(TMax.y, TMax.z));
    // 可能相交、不相交、光线在AABB盒内部三种可能
    return Tout > Tin ? true: false;
}

void IntersectObject(Ray ray, inout RayHit hit, MeshObject object){
    uint offset = object.indiceOffset;
    uint count = offset + object.indiceCount;
    for (uint i = offset; i < count; i += 3){
        float3 v0 = mul(object.localToWorldMatrix, float4(verticesBuffer[indicesBuffer[i]], 1)).xyz;
        float3 v1 = mul(object.localToWorldMatrix, float4(verticesBuffer[indicesBuffer[i + 1]], 1)).xyz;
        float3 v2 = mul(object.localToWorldMatrix, float4(verticesBuffer[indicesBuffer[i + 2]], 1)).xyz;
        float t, u, v;
        if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < hit.dist)
            {
                hit.dist = t;
                hit.pos = ray.pos + t * ray.dir;
                hit.normal = normalize(cross(v1 - v0, v2 - v0));
                hit.albedo = object.albedo;
                hit.specular = object.specular;
                hit.metallic = object.metallic;
                hit.roughness = object.roughness;
                hit.specTrans = object.specTrans;
                hit.relativeIor = object.relativeIor;
                hit.transColor = object.transColor;
                hit.emission = object.emission;
            }
        }
    }
}

void TraverseBVH(Ray ray, inout RayHit hit){
    uint stack[32];
    uint pivot = 0;
    stack[pivot++] = 1;

    while (pivot){
        pivot--;
        uint nodeIndex = stack[pivot];
        BvhNode node = bvhBuffer[nodeIndex];
        if (IntersectAABB(ray, node.boundingBox)){
            // leaf Node
            if (node.containSphereCount < 27) {
                uint startPos = node.spherePos;
                uint sphereLen = startPos + node.containSphereCount;
                for (uint i = startPos; i < sphereLen; ++i){
                    IntersectSphere(ray, hit, i);
                }
            } else { // branch Node
                if (pivot + 1 >= 32) return;
                stack[pivot++] = nodeIndex * 2;
                stack[pivot++] = nodeIndex * 2 + 1;
            }
        }
    }
}

float3 Shading(inout Ray ray, RayHit hit, uint2 idxy){
    if (hit.dist < 1.#INF){
#if _WHITE_STYLE
        ray.dir = reflect(ray.dir, hit.normal);
        ray.energy *= hit.specular;
        ray.pos = hit.pos + hit.normal * 0.001;
        // 光线和光线指向相反的方向，因此对于正面照明，点积返回 -1 而不是 1。我们需要翻转标志来弥补这一点
        return saturate(dot(hit.normal, directionalLight.xyz)) * directionalLight.w * hit.albedo;
#else
        float r2 = hit.roughness * hit.roughness;
        float judge = Rand(idxy);
        float roueltte = Rand(idxy);
        if (judge < 1 - hit.specTrans){
            // BRDF
            float3 reflection;
            float diffuseChance = 0.5 * (1 - hit.metallic);
            float specularChance = 1 - diffuseChance;
            float3 viewDir = normalize(-ray.dir);
            if (roueltte < diffuseChance){
                reflection = HemiSpehereSampling(idxy, hit.normal);
            } else {
                reflection = GGXSampling(idxy, hit.normal, r2);
                reflection = 2 * dot(viewDir, reflection) * reflection - viewDir;
                reflection = normalize(reflection);
            }

            float3 halfDir = normalize(reflection + viewDir);
            float ndotl = abs(dot(hit.normal, reflection));
            float ndotv = abs(dot(hit.normal, viewDir));
            float hdotv = abs(dot(halfDir, viewDir));
            float hdotl = abs(dot(halfDir, reflection));
            float ndoth = abs(dot(hit.normal, halfDir));

            float3 F0 = lerp(0.08 * hit.specular, hit.albedo, hit.metallic);
            float3 F = SchlickFresnel(hdotv, F0);
            float3 Kd = (1 - hit.metallic) * (1 - F);
            float NDF = NormalDistributeFunction(r2, ndoth);
            float GGX = SmithGGX(hit.roughness, ndotv, ndotl);
            float3 specularBRDF = F * NDF * GGX * 0.25 / (ndotv * ndotl + 1e-4);
            float3 diffuseBRDF = Kd * hit.albedo * DiffuseBRDF(hit.roughness, ndotl, ndotv, hdotl);
            float3 totalBRDF = (specularBRDF + diffuseBRDF) * ndotl;

            float specularPdf = ImportanceSampleGGX_PDF(NDF, ndoth, hdotv);
            float diffusePDF = ndotl * INV_PI;
            float totalPDF = (specularPdf * specularChance + diffuseChance * diffusePDF);

            ray.pos = hit.pos + hit.normal * 0.001;
            ray.dir = reflection;
            if (totalPDF > 0.0f)
                ray.energy *= totalBRDF / totalPDF;
        } else {
            // BTDF
            float etaI = 1.0;
            float etaT = 1.0 / hit.relativeIor;
            float cosThetaI = clamp(dot(ray.dir, hit.normal), -1, 1);

            float3 normalDir = cosThetaI < 0 ? hit.normal : -hit.normal;
            float3 viewDir = normalize(-ray.dir);
            float3 halfDir = GGXSampling(idxy, normalDir, r2);

            float specularChance = BSDF_Fresnel(cosThetaI, etaT, etaI);
            float3 refraction;
            if (roueltte < specularChance){
                ray.pos = hit.pos + normalDir * 0.001;
                refraction = reflect(ray.dir, halfDir);
                halfDir = normalize(viewDir + refraction);
            } else {
                ray.pos = hit.pos - normalDir * 0.001;
                float eta = cosThetaI < 0 ? etaI / etaT : etaT / etaI;
                refraction = normalize(refract(ray.dir, halfDir, eta));
                halfDir = -normalize(refraction + eta * viewDir);
            }
            ray.dir = refraction;

            float ndotl = abs(dot(normalDir, refraction));
            float ndotv = abs(dot(normalDir, viewDir));
            float hdotv = abs(dot(halfDir, viewDir));
            float hdotl = abs(dot(halfDir, refraction));
            float ndoth = abs(dot(normalDir, halfDir));

            float NDF = NormalDistributeFunction(r2, ndoth);
            float GGX = SmithGGX(hit.roughness, ndotv, ndotl);
            float3 F0 = 0.08 * hit.specular;
            float3 F = F0 + (1 - F0) * specularChance;
            float3 specularBTDF = NDF * GGX * F * 0.25 / (ndotv * ndotl + 1e-4);
            float specualrPDF = ImportanceSampleGGX_PDF(NDF, ndoth, hdotv);
            float3 refractionBTDF = RefractionBTDF(GGX, NDF, F, hdotv, hdotl, ndotv, ndotl, etaT, etaI);
            float3 totalBTDF = (specularBTDF + refractionBTDF * hit.transColor) * ndotl;

            if (specualrPDF > 0.0)
                ray.energy *= totalBTDF / specualrPDF;
        }
        return hit.emission;
#endif
    } else {
        ray.energy = float3(0.0, 0.0, 0.0);
        return Skybox.SampleLevel(samplerSkybox, ray.dir, 0).xyz;
    }
}

// 单位半球面均匀分布采样点生成和半球上做重要性采样参考http://corysimon.github.io/articles/uniformdistn-on-sphere/
float3 HemiSpehereSampling(uint2 idxy, float3 normal, float alpha){
    float cosTheta = pow(Rand(idxy), 1.0 / (alpha + 1.0));
    float sinTheta = sqrt(saturate(1.0 - cosTheta * cosTheta));
    float phi = 2 * PI * Rand(idxy);
    float3 samplingDir = float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
    return mul(samplingDir, ToTangentSpace(normal));
}

float3 GGXSampling(uint2 idxy, float3 normal, float r2){
    float random1 = Rand(idxy);
    float random2 = Rand(idxy);
    float cosTheta = sqrt((1.0 - random1) / (1.0 + (r2 * r2 - 1.0) * random1));
    float sinTheta = sqrt(saturate(1.0 - cosTheta * cosTheta));
    float phi = 2 * PI * random2;
    float3 samplingDir = float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
    return mul(samplingDir, ToTangentSpace(normal));
}

float3x3 ToTangentSpace(float3 normal){
    float3 assist = float3(1.0, 0.0, 0.0);
    if (abs(normal.x) > 0.99)
        assist = float3(0.0, 0.0, 1.0);

    float3 tangent = normalize(cross(normal, assist));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float Rand(uint2 seed){
    float result = frac(sin(randSeed / 100.0 * dot(seed, float2(12.9898, 78.233))) * 43758.5453);
    randSeed += 1.0;
    return result;
}